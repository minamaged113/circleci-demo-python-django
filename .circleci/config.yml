# following : https://circleci.com/docs/2.0/language-python/
# Specify CircleCI version to work with
version: 2

# a run is comprised of one or more jobs.
# one of which has to be build job
jobs:
    build:
        # by default a build should have a working_directory
        # and by default its value is ~/project , where 
        # project is a literal string
        working_directory: ~/circleci-demo-python-django
        
        # any job happens in Executer virtual environment
        # choose one, {Docker, Machine, macOS, Multiple
        # Docker Images}. In this example Docker is used
        docker: 
            # first image listd becomes the job's primary container
            # All commands for a job are executed in this container
            # In this example, the following is the primary container
            - image: circleci/python:3.6.3
              # using `environment` key to set environment variables
              # for all commands in the container
              environment:
                  PIPENV_VENV_IN_PROJECT: true
                  DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable

            - image: circleci/postgres:9.6.2
              environment:
                  POSTGRES_USER: root
                  POSTGRES_DB: circle_test

        # After choosing containers for jobs, now create `steps` to 
        # run specific commands. `checkout` command checks out the
        # source code to the path specified by `working_directory`
        steps:
            - checkout
            # To save time between build, cache dependencies or source
            # codes. Using `save_cache` to cache certain files or
            # directories. In this example, virtual environment and 
            # installed packages are cached.
            # Use `restore_cache` to restore cached files or directories.

            # change the ownership to CircleCI
            - run: sudo chown -R circleci:circleci /usr/local/bin
            - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
            - restore_cache:    # ensure this step occurs *before*
                                # installing dependencies.
                key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - run:
            command: |  # use pipenv to install dependencies
                        # `Pipenv` is used to create a virtual
                        # environment and install Python packages.
                sudo pip install pipenv
                pipenv install

            - save_cache:
                key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
                paths:
                    - ".venv"
                    - "/usr/local/bin"
                    - "/usr/local/lib/python3.6/site-packages"

            - run:
            command: |
                pipenv run python manage.py test
